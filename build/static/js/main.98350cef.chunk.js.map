{"version":3,"sources":["Join.js","Chat.js","App.js","serviceWorker.js","index.js"],"names":["Join","setRoom","setUser","useState","userName","setUserName","roomCode","setroomCode","className","style","fontSize","onChange","e","target","value","type","placeholder","onClick","preventDefault","fetch","method","headers","body","JSON","stringify","username","roomname","then","res","json","data","alert","catch","err","console","log","Chat","room","user","socket","conversations","setConversations","senderText","setSenderText","usersTyping","setUsersTyping","typingInfo","setTypingInfo","roomUsers","setRoomUsers","useEffect","name","on","emit","info","message","msg","prevState","length","scrollto","document","getElementById","scrollTop","scrollHeight","scrollBehavior","id","users","map","key","Math","random","toString","undefined","io","App","window","location","reload","screen","width","display","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.98350cef.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport SupervisedUserCircleOutlinedIcon from \"@material-ui/icons/SupervisedUserCircleOutlined\";\r\nimport \"./Join.css\";\r\n\r\nconst Join = ({ setRoom, setUser }) => {\r\n\tconst [userName, setUserName] = useState(\"\");\r\n\tconst [roomCode, setroomCode] = useState(\"\");\r\n\r\n\tconst handleAuth = (e) => {\r\n\t\te.preventDefault();\r\n\t\tuserName &&\r\n\t\t\troomCode &&\r\n\t\t\tfetch(\"https://chattie-backend.herokuapp.com/auth\", {\r\n\t\t\t\tmethod: \"post\",\r\n\t\t\t\theaders: { \"content-type\": \"application/json\" },\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tusername: userName,\r\n\t\t\t\t\troomname: roomCode,\r\n\t\t\t\t}),\r\n\t\t\t})\r\n\t\t\t\t.then((res) => res.json())\r\n\t\t\t\t.then((data) => {\r\n\t\t\t\t\tif (data === \"Invalid\") {\r\n\t\t\t\t\t\talert(\"Wrong Credentials\");\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tsetRoom(data);\r\n\t\t\t\t\t\tsetUser(userName);\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.catch((err) => console.log(\"Server Error\"));\r\n\r\n\t\tsetUserName(\"\");\r\n\t\tsetroomCode(\"\");\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<form className='join'>\r\n\t\t\t\t<div className='app__title'>\r\n\t\t\t\t\t<SupervisedUserCircleOutlinedIcon style={{ fontSize: \"100px\" }} />\r\n\t\t\t\t\t<h3>JOIN | CHAT | FORGET</h3>\r\n\t\t\t\t</div>\r\n\t\t\t\t<p>Username</p>\r\n\t\t\t\t<input\r\n\t\t\t\t\tonChange={(e) => setUserName(e.target.value)}\r\n\t\t\t\t\ttype='text'\r\n\t\t\t\t\tplaceholder='Enter UserName...'\r\n\t\t\t\t\tvalue={userName}\r\n\t\t\t\t></input>\r\n\t\t\t\t<p>Room Code</p>\r\n\t\t\t\t<input\r\n\t\t\t\t\tonChange={(e) => setroomCode(e.target.value)}\r\n\t\t\t\t\ttype='text'\r\n\t\t\t\t\tplaceholder='Enter Code'\r\n\t\t\t\t\tvalue={roomCode}\r\n\t\t\t\t></input>\r\n\t\t\t\t<button type='submit' onClick={handleAuth}>\r\n\t\t\t\t\tJoin Chat\r\n\t\t\t\t</button>\r\n\t\t\t</form>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default Join;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport GroupIcon from \"@material-ui/icons/Group\";\r\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\r\nimport \"./Chat.css\";\r\n\r\nconst Chat = ({ room, user, socket }) => {\r\n\tconst [conversations, setConversations] = useState([]);\r\n\tconst [senderText, setSenderText] = useState(\"\");\r\n\tconst [usersTyping, setUsersTyping] = useState(false);\r\n\tconst [typingInfo, setTypingInfo] = useState({});\r\n\tconst [roomUsers, setRoomUsers] = useState();\r\n\r\n\tuseEffect(() => {\r\n\t\tfetch(\"https://chattie-backend.herokuapp.com/getmsgs\", {\r\n\t\t\tmethod: \"post\",\r\n\t\t\theaders: { \"content-type\": \"application/json\" },\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\troom: room.name,\r\n\t\t\t}),\r\n\t\t})\r\n\t\t\t.then((res) => res.json())\r\n\t\t\t.then((data) => setConversations(data))\r\n\t\t\t.then(() => {\r\n\t\t\t\tsocket.on(\"room__mod\", (data) => {\r\n\t\t\t\t\tsetRoomUsers(data);\r\n\t\t\t\t});\r\n\r\n\t\t\t\tsocket.emit(\"join__room\", { user: user, room: room });\r\n\r\n\t\t\t\tsocket.on(\"new__typing\", (info) => {\r\n\t\t\t\t\tif (info.message) {\r\n\t\t\t\t\t\tsetUsersTyping(true);\r\n\t\t\t\t\t\tsetTypingInfo({\r\n\t\t\t\t\t\t\tusername: `${info.username} typing...`,\r\n\t\t\t\t\t\t\tmessage: `${info.message}...`,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else setUsersTyping(false);\r\n\t\t\t\t});\r\n\r\n\t\t\t\tsocket.on(\"new__msg\", (msg) => {\r\n\t\t\t\t\tsetConversations((prevState) => [...prevState, msg]);\r\n\t\t\t\t});\r\n\t\t\t})\r\n\t\t\t.catch((err) => console.log(\"Server Error\"));\r\n\t}, [user, socket, room]);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (conversations.length) {\r\n\t\t\tconst scrollto = document.getElementById(\"need_scroll\");\r\n\r\n\t\t\tscrollto.scrollTop = scrollto.scrollHeight;\r\n\t\t\tscrollto.style.scrollBehavior = \"smooth\";\r\n\t\t}\r\n\t}, [conversations, typingInfo]);\r\n\r\n\tconst sendMessage = (e) => {\r\n\t\te.preventDefault();\r\n\t\tsenderText &&\r\n\t\t\tsocket.emit(\"chat__msg\", {\r\n\t\t\t\troom: room.name,\r\n\t\t\t\tusername: user,\r\n\t\t\t\tmessage: senderText,\r\n\t\t\t});\r\n\r\n\t\tsetSenderText(\"\");\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tsocket.emit(\"chat__typing\", {\r\n\t\t\troom: room.name,\r\n\t\t\tusername: user,\r\n\t\t\tmessage: senderText,\r\n\t\t});\r\n\t}, [senderText, room, user, socket]);\r\n\r\n\t// const typing = (e) => {\r\n\t// \tsetSenderText(e.target.value);\r\n\t// \tif (senderText) {\r\n\t// \t\tsocket.emit(\"chat__typing\", {\r\n\t// \t\t\troom: room.name,\r\n\t// \t\t\tusername: user,\r\n\t// \t\t\tmessage: e.target.value,\r\n\t// \t\t});\r\n\t// \t}\r\n\t// };\r\n\r\n\treturn (\r\n\t\t<div className='chat'>\r\n\t\t\t<div id='chat__body' className='chat__body'>\r\n\t\t\t\t<div id='chat__info' className='chat__info'>\r\n\t\t\t\t\t<h4>\r\n\t\t\t\t\t\t<GroupIcon /> Room\r\n\t\t\t\t\t</h4>\r\n\t\t\t\t\t<p className='room_name'>{room.name}</p>\r\n\t\t\t\t\t<h4>\r\n\t\t\t\t\t\t<AccountCircleIcon />\r\n\t\t\t\t\t\tUsers\r\n\t\t\t\t\t</h4>\r\n\t\t\t\t\t<div className='room__users'>\r\n\t\t\t\t\t\t{roomUsers?.users.map((user) => (\r\n\t\t\t\t\t\t\t<li className='room__user' key={user}>\r\n\t\t\t\t\t\t\t\t{user}\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div id='need_scroll' className='chat__msgs'>\r\n\t\t\t\t\t{conversations.map((msg) => (\r\n\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\tkey={Math.random().toString()}\r\n\t\t\t\t\t\t\tclassName={`${\r\n\t\t\t\t\t\t\t\tuser === msg.username ? \"msg__containerself\" : undefined\r\n\t\t\t\t\t\t\t} ${msg.username === \"chaTTie BOT\" && \"bot__msg\"}`}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<div className='chat__msg'>\r\n\t\t\t\t\t\t\t\t<h6>{msg.username}</h6>\r\n\t\t\t\t\t\t\t\t<div>{msg.message}</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t))}\r\n\t\t\t\t\t{usersTyping && (\r\n\t\t\t\t\t\t<div className='chat__msg'>\r\n\t\t\t\t\t\t\t<h6>{typingInfo.username}</h6>\r\n\t\t\t\t\t\t\t<div>{typingInfo.message}</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<form className='chat__footer'>\r\n\t\t\t\t<div className='mobile__footer'>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tclassName='chat__input'\r\n\t\t\t\t\t\tonChange={(e) => setSenderText(e.target.value)}\r\n\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\tplaceholder='Enter your message'\r\n\t\t\t\t\t\tvalue={senderText}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<button onClick={sendMessage} type='submit'>\r\n\t\t\t\t\t\t<SendIcon />\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Chat;\r\n","import React, { useState } from \"react\";\nimport io from \"socket.io-client\";\nimport Join from \"./Join\";\nimport ExitToAppRoundedIcon from \"@material-ui/icons/ExitToAppRounded\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport \"./App.css\";\nimport Chat from \"./Chat\";\n\nconst socket = io(\"https://chattie-backend.herokuapp.com/\");\n\nconst App = () => {\n\tconst [room, setRoom] = useState(null);\n\tconst [user, setUser] = useState(\"\");\n\n\tconst handleLogOut = () => {\n\t\twindow.location.reload();\n\t};\n\n\tconst toggleinfo = () => {\n\t\tconst info = document.getElementById(\"chat__info\");\n\t\tinfo.style.display === \"none\"\n\t\t\t? (info.style.display = \"flex\")\n\t\t\t: (info.style.display = \"none\");\n\t};\n\n\treturn (\n\t\t<div className='app'>\n\t\t\t<div id='app_card' className={`app_card ${user && \"app_cardext\"}`}>\n\t\t\t\t<div id='app_title' className='app_title'>\n\t\t\t\t\t<h1>.chaTTie</h1>\n\t\t\t\t\t{user && (\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<button className='leave__room' onClick={handleLogOut}>\n\t\t\t\t\t\t\t\t<ExitToAppRoundedIcon />\n\t\t\t\t\t\t\t</button>\n\n\t\t\t\t\t\t\t{window.screen.width <= 500 && (\n\t\t\t\t\t\t\t\t<button className='leave__room' onClick={toggleinfo}>\n\t\t\t\t\t\t\t\t\t<MenuIcon />\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t\t<div className='mobile__view'>\n\t\t\t\t\t{user ? (\n\t\t\t\t\t\t<Chat room={room} user={user} socket={socket} />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<Join setRoom={setRoom} setUser={setUser} />\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}